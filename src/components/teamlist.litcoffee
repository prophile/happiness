Component: Team List
====================

The team list is the drop-down menu in the top left which presents
the teams the user is in as options.

    Happiness.TeamList = {}

Setting The List
----------------

Luckily, we know exactly what teams the user is in ahead-of-time
since that's part of the authentication data. How things go from
there depends in no small quantity upon how many teams the user is
in.

If the answer is '1' (which is a common case) then we can get away
with just making that entirely static. If not, however, we publish
the drop-down menu for selecting the current team.

    if AUTH_DATA.teams.length is 1
      Happiness.TeamList.CurrentTeam =
        Bacon.never().toProperty AUTH_DATA.teams[0]

Otherwise, we bring up the team list.

    else
      $('#team-list').removeClass 'hidden'

The current team is then a property generated by the click streams.

      switchTeam = new Bacon.Bus()
      Happiness.TeamList.CurrentTeam = switchTeam.toProperty(null)

We then loop through the available teams, inserting each one into
the drop-down box and binding its clicks into the "team switch"
bus.

      dropdown = $('#team-list ul')
      for team in AUTH_DATA.teams
        link = $("<a href=\"#\">#{team}</a>")
        switchTeam.plug link.asEventStream('click').map(team)
        item = $('<li>')
        item.append link
        dropdown.append item

Team Name
---------

The top of the dropdown has the team name displayed if a team is
selected. If not, it shows "Team".

    Happiness.TeamList.CurrentTeam
                      .map((x) -> x ? 'Team')
                      .assign($('#team-name'), 'text')

Debug: Team List Dump
---------------------

For debugging purposes, we dump team switches.

    Happiness.TeamList.CurrentTeam.toEventStream().onValue (val) ->
      console.log "Switched team: " + val

